//OOPS
JAVA DESIGN BEST practise https://howtodoinjava.com/best-practices/
//SOLID 
The SOLID Programming Principles of OOP
https://springframework.guru/solid-principles-object-oriented-programming/
In short, 
The Single responsibility principle states that a class (or some other module) should only have one responsibility i.e. one reason to change. 
The Open/closed states that software entities should be open for extension, but closed for modification. 
The Liskov substitution principle, objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program.
The Interface segregation principle states that many client-specific interfaces are better than one general-purpose interface, and 
The Dependency inversion principle could be summed up in this sentence: “Depend upon abstractions. Do not depend upon concretions”.

To learn more about the SOLID Principles of Object Oriented Programming, visit these Spring Framework Guru articles:

    Single Responsibility Principle
    Open Closed Principle
    Liskov Substitution Principle
    Interface Segregation Principle
    Dependency Inversion Principle
	example for above 5 >	https://howtodoinjava.com/best-practices/5-class-design-principles-solid-in-java/
	
	
	------
	
	Factory pattern https://www.journaldev.com/1392/factory-design-pattern-in-java
	abstract factory https://www.journaldev.com/1418/abstract-factory-design-pattern-in-java
		singleton https://www.journaldev.com/1377/java-singleton-design-pattern-best-practices-examples
	