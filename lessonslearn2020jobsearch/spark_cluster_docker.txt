cd /mnt/e/rockthejvm/docker/docker-spark-cluster-master

cd /mnt/e/rockthejvm/intellijws/spark-optimization/spark-cluster

cd /mnt/e/rockthejvm/intellijws/spark-optimization/spark-cluster


docker inspect -f \
'{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' \
f3ffe4404004


docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' f3ffe4404004

docker inspect -f \
'{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' \
f3ffe4404004

docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' f3ffe4404004


wsl
wsl -l -v
wsl --set-default-version 2
----------------------------------------------------------------------------------------------------------------------------------
//Rock JVM
Step1: 
open powershell (dont change defualt path till step 3 else it wont recognise docker command)
1. docker info
2. wsl
3. docker-compose up --scale spark-worker=3
Step2: //connect to master and start spark shell 
4.open  new powershell
5. docker exec -it spark-cluster_spark-master_1 bash
6. cd spark/bin
7 ./spark-shell
----------========================================================================================

docker ps
docker ps -a --format "table {{.Names}} {{.Status}}"
//get ip of container
docker inspect --format="{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}" da11e5129aec
//below regenereate the run command which was ran.
//docker inspect` template to regenerate the `docker run` command that created a container
C:\Users\Alvin>wsl
alvin@LAPTOP-DD53C8FK:/mnt/c/Users/Alvin$ docker inspect --format "$(<run2.tpl)" da11e5129aec
//save as run.tpl and run above command wi
docker run \
    --name={{.Name}} \
    {{range $e := .Config.Env}}--env={{printf "%q" $e}} \
    {{end}}{{range $p, $conf := .NetworkSettings.Ports}}{{with $conf}}-p {{(index $conf 0).HostIp}}:{{(index $conf 0).HostPort}}:{{$p}} \
    {{end}}{{end}}{{range $n, $conf := .NetworkSettings.Networks}}{{with $conf}}--network {{printf "%q" $n}} \
    {{range $conf.Aliases}}--network-alias {{printf "%q" .}} {{end}} \
    {{end}}{{end}}{{range $v := .HostConfig.VolumesFrom}}--volumes-from={{printf "%q" .}} \
    {{end}}{{range $v := .HostConfig.Binds}}--volume={{printf "%q" .}} \
    {{end}}{{range $l, $v := .Config.Labels}}--label {{printf "%q" $l}}={{printf "%q" $v}} \
    {{end}}{{range $v := .HostConfig.CapAdd}}--cap-add {{printf "%q" .}} \
    {{end}}{{range $v := .HostConfig.CapDrop}}--cap-drop {{printf "%q" .}} \
    {{end}}{{range $d := .HostConfig.Devices}}--device={{printf "%q" (index $d).PathOnHost}}:{{printf "%q" (index $d).PathInContainer}}:{{(index $d).CgroupPermissions}} \
    {{end}}{{range $v := .Config.Entrypoint}}--entrypoint={{printf "%q" .}} \
    {{end}}{{with .HostConfig.LogConfig}}--log-driver={{printf "%q" .Type}} \
    {{range $o, $v := .Config}}--log-opt {{$o}}={{printf "%q" $v}} \
    {{end}}{{end}}{{with .HostConfig.RestartPolicy}}--restart="{{.Name}}{{if eq .Name "on-failure"}}{{.MaximumRetryCount}}{{end}}" \
    {{end}}{{if .Config.Tty}}-t \
    {{end}}{{if .Config.OpenStdin}}-i \
    {{end}}{{if not (.Config.AttachStdout)}}--detach=true \
    {{end}}{{if .HostConfig.Privileged}}--privileged \
    {{end}}{{printf "%q" .Config.Image}} \
    {{range .Config.Cmd}}{{printf "%q" .}} {{end}}
----------------------------------------------------------------------------------------------------------------
